--- image.js	2016-07-11 15:05:11.000000000 +0100
+++ picture.js	2016-07-11 15:05:11.000000000 +0100
@@ -1,64 +1,74 @@
 import React, { Component } from 'react';
 
-import { breakpoints, buildImageServiceUrl } from '../src/helpers';
+import { breakpoints } from '../src/helpers/';
 
-// convert the `src` or `srcset` attribtues to a data attribute
-const hideImage = obj =>
-	Object.keys(obj)
-		.reduce((dataObj, name) => {
-			if (name === 'src' || name === 'srcSet') {
-				dataObj[`data-${name.toLowerCase()}`] = obj[name];
-			} else {
-				dataObj[name] = obj[name];
-			}
-			return dataObj;
-		}, {});
+const createImg = attrs => {
+	const attrsStringified = Object.keys(attrs)
+		.map(attrName => `${attrName}="${attrs[attrName]}"`)
+		.join(' ');
+	return `<img ${attrsStringified} />`
+};
+
+const createSources = (urls, { alt = '', classes = [], withFallback = false }) => {
+	const className = classes.join(' ');
+	let sources = breakpoints
+		.filter(breakpoint => breakpoint.name !== 'default')
+		.map(breakpoint => {
+			const url = urls[breakpoint.name];
+			return url ? `<source srcset="${url}" media="(min-width: ${breakpoint.px}px)" />` : null
+		})
+		.filter(source => source);
+	if (sources.length) {
+		sources = ['<!--[if IE 9]><video style="display: none;"><![endif]-->']
+			.concat(sources, '<!--[if IE 9]></video><![endif]-->');
+	}
+
+	const imgAttrs = {
+		'class': className,
+		alt
+	};
+
+	if (urls.default) {
+		const defaultSrc = urls.default;
+		if (withFallback) {
+			imgAttrs.src = defaultSrc;
+		} else {
+			imgAttrs.srcset = defaultSrc;
+		}
+	}
+
+	return sources
+		.concat(createImg(imgAttrs))
+		.join('');
+};
 
 /**
- * @param {string} src - Actual src to use. If set, assume it's non-responsive, i.e. ignore url, widths, sizes
- * @param {string} url - URL of the image
- * @param {number[]} widths - Widths of the image, in pixels
- * @param {Object} [sizes = {}] - Keys are breakpoints, values the length. e.g.
- * { default: '33.3vw', L: 'calc(.333 * (100vw - 12em)'}
- * @param {string[]|string} [classes = []] - Additional classes to add to the element
- * @param {string} [width] - Width of the image
- * @param {string} [height] - Height of the image
+ * @param {Object} urls - URLs of the image to use at different breakpoints. Key is the breakpoint, value the URL,
+ * e.g. { default: 'some/image.jpg', L: 'another/image.jpg' }
+ * @param {boolean} [withFallback = false] - Render a 'fallback' image, in the `default` size i.e. for browsers that
+ * don't support the picture element
+ * @param {string[]|string} [classes = []] - Additional classes to add to the `picture` element
+ * @param {string[]|string} [imgClasses = []] - Additional classes to add to the `img` element
  * @param {string} [alt = ''] - Alt text for the image
- * @param {boolean} [lazyLoad = false] - Lazy load the image
  */
 export default class extends Component {
 	render () {
-		const image = this.props;
-		const className = ['n-image']
-			.concat(image.classes || [])
-			.join(' ');
-		const attrs = {
-			alt: image.alt,
-			className
+		const classes = ['n-image'].concat(this.props.classes || []).join(' ');
+		const imgClasses = ['n-image__img'].concat(this.props.imgClasses || []);
+		const opts = {
+			alt: this.props.alt,
+			classes: imgClasses,
+			withFallback: this.props.withFallback
 		};
-		if (image.src) {
-			Object.assign(attrs, { src: image.src, width: image.width, height: image.height });
-		} else {
-			attrs.srcSet = image.widths
-				.sort((widthOne, widthTwo) => widthTwo - widthOne)
-				.map(width => `${buildImageServiceUrl(image.url, { width })} ${width}w`)
-				.join(', ');
-			const sizes = image.sizes || {};
-			attrs.sizes = breakpoints
-				.map(breakpoint => {
-					const size = sizes[breakpoint.name];
-					return size ?
-						breakpoint.name === 'default' ? size : `(min-width: ${breakpoint.px}px) ${size}` :
-						null;
-				})
-				.filter(size => size)
-				.join(', ');
-		}
-		const lazyLoadedAttrs = hideImage(attrs);
-		lazyLoadedAttrs.className += ' n-image--lazy-loading n-util-hide-core';
 
-		return image.lazyLoad ?
-			<img {...lazyLoadedAttrs} /> :
-			<img {...attrs} />;
+
+		// dangerouslySetInnerHTML is used to render the conditional IE9 comments
+		// Will throw an error if such comments are returned directly
+		return (
+			<picture
+				className={classes}
+				dangerouslySetInnerHTML={{__html: createSources(this.props.urls, opts)}}>
+			</picture>
+		);
 	}
-};
+}
